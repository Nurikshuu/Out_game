import streamlit as st
import pandas as pd
import joblib
import numpy as np
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéÆ Game Rating Classifier",
    page_icon="üéÆ",
    layout="wide"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        model = joblib.load('model/model.joblib')
        vectorizer = joblib.load('model/vectorizer.joblib')
        return model, vectorizer
    except FileNotFoundError:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.")
        return None, None

def predict_rating(text, model, vectorizer):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
    text_tfidf = vectorizer.transform([text])
    prediction = model.predict(text_tfidf)[0]
    probabilities = model.predict_proba(text_tfidf)[0]

    rating_mapping = {
        0: 'Very Negative',
        1: 'Mostly Negative',
        2: 'Mixed',
        3: 'Mostly Positive',
        4: 'Very Positive'
    }

    predicted_rating = rating_mapping[prediction]
    confidence = float(np.max(probabilities))

    return predicted_rating, confidence, probabilities

def log_prediction(game_title, comment, predicted_rating, confidence):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    os.makedirs('logs', exist_ok=True)

    log_data = {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'game_title': game_title,
        'comment': comment,
        'predicted_rating': predicted_rating,
        'confidence': confidence
    }

    log_df = pd.DataFrame([log_data])

    if os.path.exists('logs/logs.csv'):
        log_df.to_csv('logs/logs.csv', mode='a', header=False, index=False)
    else:
        log_df.to_csv('logs/logs.csv', index=False)

def main():
    st.title("üéÆ Game Rating Classifier")
    st.markdown("### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–≥—Ä –ø–æ overall player rating")

    model, vectorizer = load_model()
    if model is None or vectorizer is None:
        st.stop()

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ")

        game_title = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: Counter-Strike 2"
        )

        comment = st.text_area(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã, –∂–∞–Ω—Ä—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏...",
            height=150
        )

        if st.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", type="primary"):
            if comment.strip():
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
                    predicted_rating, confidence, probabilities = predict_rating(
                        comment, model, vectorizer
                    )

                log_prediction(game_title or "Unnamed Game", comment,
                               predicted_rating, confidence)

                with col2:
                    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç")

                    color_mapping = {
                        'Overwhelmingly Positive': 'blue',
                        'Very Positive': 'green',
                        'Mostly Positive': 'lightgreen',
                        'Mixed': 'orange',
                        'Mostly Negative': 'lightcoral',
                        'Very Negative': 'red'
                    }

                    color = color_mapping.get(predicted_rating, 'gray')

                    st.markdown(f"""
                    <div style="padding: 20px; border-radius: 10px; 
                                background-color: {color}; color: white; text-align: center;">
                        <h3>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</h3>
                        <h2>{predicted_rating}</h2>
                        <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")

                    rating_names = ['Very Negative', 'Mostly Negative', 'Mixed',
                                    'Mostly Positive', 'Very Positive', 'Overwhelmingly Positive']

                    prob_df = pd.DataFrame({
                        '–†–µ–π—Ç–∏–Ω–≥': rating_names,
                        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': probabilities
                    })

                    st.bar_chart(prob_df.set_index('–†–µ–π—Ç–∏–Ω–≥'))
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã!")

    # –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
    st.markdown("---")
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤")

    if os.path.exists('logs/logs.csv'):
        try:
            logs_df = pd.read_csv('logs/logs.csv', names=[
                'timestamp', 'game_title', 'comment', 'predicted_rating', 'confidence'
            ], header=None)

            st.metric("–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", len(logs_df))

            rating_counts = logs_df['predicted_rating'].value_counts()
            st.bar_chart(rating_counts)

            st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            recent_logs = logs_df.tail(5)[['timestamp', 'game_title', 'predicted_rating', 'confidence']]
            st.dataframe(recent_logs, use_container_width=True)

        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
    else:
        st.info("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == "__main__":
    main()
